<<readBam, echo=FALSE>>=

## Rsamtools
what <- c("rname")# , "strand", "pos", "qwidth", "seq")
param <- ScanBamParam(what = what)

files <- list.files("/home/ele/Data/RNAseq/mapping/", "*.bam$")

countsList <- list()
for (fi in files) {
  bam <- scanBam(paste("/home/ele/Data/RNAseq/mapping/", fi, sep=""), param=param)
  counts <- table(bam[[1]]$rname)
  counts.frame <- as.data.frame(counts)
  countsList[[fi]] <- counts.frame
}

counts.frame.long <- melt(countsList, id.vars="Var1")
counts.frame.long$variable <- NULL

counts.frame.wide <- reshape(counts.frame.long, v.names="value",
                             idvar="Var1", direction="wide", timevar="L1")
names(counts.frame.wide) <- gsub("^value\\.", "", names(counts.frame.wide))
names(counts.frame.wide) <- gsub("\\.bam$", "", names(counts.frame.wide))
row.names(counts.frame.wide) <- counts.frame.wide$Var1
counts.frame.wide$Var1 <- NULL

sex.conds <- factor(ifelse(grepl("M_\\d", names(counts.frame.wide)), "male", "female" ))
eel.conds <- factor(ifelse(grepl("^AA", names(counts.frame.wide)), "Aa", "Aj" ))
pop.conds <- factor(ifelse(grepl("\\w\\w_R.", names(counts.frame.wide)), "EU", "TW" ))

cds <- newCountDataSet(counts.frame.wide, sex.conds)
cds <- estimateSizeFactors(cds)
cds <- estimateVarianceFunctions(cds)
res <- nbinomTest(cds, "male", "female")

vsd <- getVarianceStabilizedData( cds )
dists <- dist( t( vsd ) )
idists <- as.matrix(dists)

## check that all tech-reps are clustering, m/f are clustering, etc...
## heatmap (idists , symm=TRUE, margins = c (7,7))


### Sum up technical replicates!!!
counts.frame.long$L1 <- gsub("_\\d.bam", "", counts.frame.long$L1)
counts.frame.long$L1 <- as.factor(counts.frame.long$L1)
counts.frame <- as.data.frame(tapply(counts.frame.long$value,
                                     list(counts.frame.long$Var1, counts.frame.long$L1),
                                     sum))

sex.conds <- factor(ifelse(grepl("M$", names(counts.frame)), "male", "female" ))
eel.conds <- factor(ifelse(grepl("^AA", names(counts.frame)), "Aa", "Aj" ))
pop.conds <- factor(ifelse(grepl("\\w\\w_R.*", names(counts.frame)), "EU", "TW" ))


## Male/Female

cds.mf <- newCountDataSet(counts.frame, sex.conds)
cds.mf <- estimateSizeFactors(cds.mf)
cds.mf <- estimateVarianceFunctions(cds.mf)
res.mf <- nbinomTest(cds.mf, "male", "female")

vsd.mf <- getVarianceStabilizedData( cds.mf )
dists <- dist( t( vsd.mf ) )
idists <- as.matrix(dists)

## check that m/f are clustering, etc...
## heatmap (idists , symm=TRUE, margins = c (7,7))

## scvPlot(cds.mf)

## residualsEcdfPlot( cds.mf, "male" )
## residualsEcdfPlot( cds.mf, "female" )

## plot( 
##      res.mf$baseMean, 
##      res.mf$log2FoldChange, 
##      log="x", pch=20, cex=.4, 
##      col = ifelse( res.mf$padj < .1, "red", "black" ),
##      main="My data")

sig.mf <- res.mf[res.mf$padj < .1 & !is.na(res.mf$padj),"id"]

## Eel

cds.eel <- newCountDataSet(counts.frame, eel.conds)
cds.eel <- estimateSizeFactors(cds.eel)
cds.eel <- estimateVarianceFunctions(cds.eel)
res.eel <- nbinomTest(cds.eel, "Aa", "Aj")

## scvPlot(cds.eel)

## residualsEcdfPlot( cds.eel, "Aa" )
## residualsEcdfPlot( cds.eel, "Aj" )

## plot( 
##      res.eel$baseMean, 
##      res.eel$log2FoldChange, 
##      log="x", pch=20, cex=.4, 
##      col = ifelse( res.eel$padj < .1, "red", "black" ),
##      main="My data")

sig.eel <- res.eel[res.eel$padj < .1 & !is.na(res.eel$padj),"id"]

## Populations

cds.pop <- newCountDataSet(counts.frame, pop.conds)
cds.pop <- estimateSizeFactors(cds.pop)
cds.pop <- estimateVarianceFunctions(cds.pop)
res.pop <- nbinomTest(cds.pop, "EU", "TW")

## scvPlot(cds.pop)

## residualsEcdfPlot( cds.pop, "EU" )
## residualsEcdfPlot( cds.pop, "TW" )

## plot( 
##      res.pop$baseMean, 
##      res.pop$log2FoldChange, 
##      log="x", pch=20, cex=.4, 
##      col = ifelse( res.pop$padj < .1, "red", "black" ),
##      main="My data")

sig.pop <- res.pop[res.pop$padj < .1 & !is.na(res.pop$padj),"id"]

@ 
