<<annot.test, echo=FALSE, cache=TRUE>>=

ann <- subset(GO.annot, pept_id%in%rownames(co.f))
ann.mapping <- ann[,c("pept_id", "go_term")]

## produce a AnnotationDbi object 
goframeData <- as.data.frame(cbind(frame.go_id=as.character(ann.mapping$go_term),
                                   frame.Evidence="IEA",
                                   frame.gene_id=as.character(ann.mapping$pept_id)))
goFrame <- GOFrame(goframeData, organism="Anguillicola crassus")

## produce an full GO-mapping
goAllFrame <- GOAllFrame(goFrame)
all.ann.mapping <- as.data.frame(cbind(pept_id=goAllFrame@data$gene_id,
                                       go_term=goAllFrame@data$go_id))

### Not so convincing with GOseq:
## goseq.wrapper <- function(de.contigs, contigs, map, direction){
##   de <- as.integer(contigs%in%de.contigs)
##   names(de) <- contigs
##   bias.data <- as.integer(contig.df[contig.df$contig%in%rownames(co.f),
##                                     "length"])
##   pwf <- nullp(de, bias.data=bias.data, plot.fit=FALSE) 
##   go.stats <- goseq(pwf, gene2cat=map, method='Wallenius')

##   if (direction == "over"){
##     GO.enr <- merge(go.stats[go.stats$over_represented_pvalue<0.05,],
##                     ann, by.x="category", by.y="go_term")[, c(1, 2, 4:6)]
##   }
##   if (direction == "under"){
##     GO.enr <- merge(go.stats[go.stats$under_represented_pvalue<0.05,],
##                     ann, by.x="category", by.y="go_term")[, c(1:3, 5, 6)]
##   }
##   if (nrow(GO.enr)>0){
##     ratio <- do.call("rbind",
##                      by(GO.enr, GO.enr$category, function(x) {
##                        c(length(de[names(de)%in%x$pept_id & de>0]),
##                          length(unique(x$pept_id)))}))
##     ratio <- as.data.frame(ratio)
##     names(ratio) <- c("count", "size")
##     GO.enr <- GO.enr[GO.enr$pept_id%in%names(de[de>0]), ]
##     merge(GO.enr, ratio, by.x="category", by.y="row.names")}
##   else NA
## }

## GO.over.l <- lapply(contigs.l, goseq.wrapper,
##                     rownames(co.f),
##                     all.ann.mapping, "over")

## GO.under.l <- lapply(contigs.l, goseq.wrapper,
##                      rownames(co.f),
##                      all.ann.mapping, "under")

## GO.term.over.l <- lapply(GO.over.l, function (x){
##   ter <- x[!duplicated(x$category), ]
##   ter <- ter[order(ter$pcf, ter$size, decreasing=TRUE),]
## })

## GO.term.under.l <- lapply(GO.under.l, function (x){
##   ter <- x[!duplicated(x$category), ]
##   ter <- ter[order(ter$pcf, ter$size, decreasing=TRUE),]
## })

###############################################
## Better with GOstats

GOstats.wrapper <- function (set, annot) {
  A <- lapply(c("MF", "BP", "CC"), function (ontology){
    ## function internal because we need the pcf specific subset
    goframeData <- as.data.frame(cbind(frame.go_id=
                                       as.character(gsub(" ", "",
                                                         annot[annot$pcf%in%ontology,
                                                                    "go_term"])),
                                       frame.Evidence="IEA",
                                       frame.gene_id=as.character(annot[annot$pcf%in%ontology,
                                         "pept_id"])))
    goFrame <- GOFrame(goframeData, organism="Anguillicola crassus")
    goAllFrame <- GOAllFrame(goFrame)
    gsc <- GeneSetCollection(goAllFrame, setType = GOCollection())
    set <- set[set%in%as.character(goframeData$frame.gene_id)]
    if (length(set) < 1) {
      return(data.frame(GOMFID=NA, Pvalue=NA,
                        OddsRatio=NA, ExpCount=NA, Count=NA,
                        Size=NA, Term=NA, direction=NA, pcf=NA))}
    ## now the parameters and the test
    over.params <- GSEAGOHyperGParams(name = "GSEA based annot arameters
                                             for over-representation",
                                      geneSetCollection = gsc,
                                      geneIds = as.character(set),
                                      universeGeneIds = unique(annot[annot$pcf%in%ontology,
                                        "pept_id"]),
                                      ontology = ontology,
                                      pvalueCutoff = 0.05,
                                      conditional = FALSE,
                                      testDirection = "over") 
    OVER <- hyperGTest(over.params)
    Over <- summary(OVER)
    if (nrow(Over)>0) Over <- cbind(Over, direction="Over", pcf=ontology) 
    under.params <- GSEAGOHyperGParams(name = "GSEA based annot arameters
                                             for under-representation",
                                       geneSetCollection = gsc,
                                       geneIds = as.character(set),
                                       universeGeneIds = unique(annot[annot$pcf%in%ontology,
                                         "pept_id"]),
                                       ontology = ontology,
                                       pvalueCutoff = 0.05,
                                       conditional = FALSE,
                                       testDirection = "under")
    UNDER <- hyperGTest(under.params)
    Under <- summary(UNDER)
    if (nrow(Under)>0) Under <- cbind(Under, direction="Under", pcf=ontology) 

    if (nrow(Over)>0 &  nrow(Under)>0) All <- rbind(Over, Under)
    if (nrow(Over)==0 &  nrow(Under)>0) All <- Under
    if (nrow(Over)>0 &  nrow(Under)==0) All <- Over
    if (nrow(Over)>0 &  nrow(Under)==0) {ALL <- data.frame(GOMFID=NA, Pvalue=NA,
                              OddsRatio=NA, ExpCount=NA, Count=NA,
                              Size=NA, Term=NA, direction=NA, pcf=NA)}
    names(All)[1] <- "GO_ID"
    return(All)
  })
  do.call(rbind, A)
}

GO.over.under.l <- lapply(contigs.l, GOstats.wrapper, ann)

get.count.table <- function (contig){
  contig.mean <- tapply(ncu[contig,], eel.conds:pop.conds, mean)
  Bm.ortho <- as.character(contig.df[contig.df$contig%in%contig, "Bm.hit"])
  Ce.ortho <- as.character(contig.df[contig.df$contig%in%contig, "Ce.hit"])
  if (!is.na(Bm.ortho)){
    bm.ortho.mean <- tapply(BM.ncu[Bm.ortho,], eel.conds:pop.conds, mean)}
  else {bm.ortho.mean <- c(NA, NA, NA, NA)}
  if (!is.na(Ce.ortho)){
    ce.ortho.mean <- tapply(CE.ncu[Ce.ortho,], eel.conds:pop.conds, mean)}
  else {ce.ortho.mean <- c(NA, NA, NA, NA)}
  tab <- rbind(contig.mean, bm.ortho.mean, ce.ortho.mean)
  rownames(tab)[1] <- paste(contig, "mean", sep=".")
  return(tab)
}



## blast.annot.in <- function (annot.regex){
##   contig.df[grepl(paste("^", annot.regex, "$", sep=""), contig.df$contig) |
##             grepl(annot.regex, contig.df$Bm.annot, ignore.case=TRUE) |
##             grepl(annot.regex, contig.df$Ce.annot, ignore.case=TRUE) |
##             grepl(annot.regex, contig.df$nr.uniprot.annot, ignore.case=TRUE),
##             c("contig", "Bm.annot", "Bm.bit", "Ce.annot", "Ce.bit", "nr.uniprot.annot", "nr.bit")]
## }

## ## specific annotation counts-highlighting
## get.annot.count.table <- function (annot.regex){
##   contigs <- contig.df[grepl(annot.regex, contig.df$Bm.annot, ignore.case=TRUE) |
##                        grepl(annot.regex, contig.df$Ce.annot, ignore.case=TRUE) |
##                        grepl(annot.regex, contig.df$nr.uniprot.annot, ignore.case=TRUE),
##                        "contig"]
##   counts <- co.f[rownames(co.f)%in%contigs,]
##   signif.counts <- co.f[rownames(co.f)%in%contigs &
##                         rownames(co.f)%in%contigs.l[[3]],]
##   signif.means <- tapply(t(colSums(signif.counts)), eel.conds:pop.conds, mean)
##   signif.sums <- tapply(t(colSums(signif.counts)), eel.conds:pop.conds, sum)
##   total.means <- tapply(t(colSums(counts)), eel.conds:pop.conds, mean)
##   total.sums <-  tapply(t(colSums(counts)), eel.conds:pop.conds, sum)
##   rbind(signif.means, signif.sums, total.means, total.sums)
## }

## ## highlighting very interesting Cytochrome C - contigs:
## cox.table <- get.annot.count.table("Cytochrome C oxidase subunit")
## cox.tab <- xtable(cox.table)

## ## highlighting very interesting Cystatin:
## cy.table <- get.annot.count.table("Cystatin")
## cy.tab <- xtable(cy.table)

## ## Cuticullar collagen:
## col.table <- get.annot.count.table("Cutic.* collagen")
## col.t <- xtable(col.table)

## col7.table <- get.annot.count.table("Cuticle collagen 7")

## nadh.table <- get.annot.count.table("NADH dehydrogenase")
## nadh1.table <- get.annot.count.table("NADH dehydrogenase ND1|NADH dehydrogenase subunit 1")
## nadh4.table <- get.annot.count.table("NADH dehydrogenase ND4|NADH dehydrogenase subunit 4")
## nadh5.table <- get.annot.count.table("NADH dehydrogenase ND5|NADH dehydrogenase subunit 5")

@ 
