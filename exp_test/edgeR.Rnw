<<edgeR, echo=FALSE, cache=TRUE, results=hide>>=

design <- model.matrix(~sex.conds*eel.conds*pop.conds)

## Counts frame to full DGEList

ed <- DGEList(co.f, lib.size=colSums(co.f))
ed <- calcNormFactors(ed)
ed <- estimateGLMCommonDisp(ed, design=design)
ed <- estimateGLMTrendedDisp(ed, design=design)
ed <- estimateGLMTagwiseDisp(ed, design=design)

## glmfit for DGEList uding tagwise dispersion
glmfit <- glmFit(ed, design, dispersion=ed$tagwise.dispersion)

glm.wrapper <- function(de.obj, fit.obj, conds.regex){
  glm.list <- list()
  coe <- names(as.data.frame(fit.obj$design))
  coe.l <- lapply(conds.regex, function (x) grep(x, coe))
  for (i in 1:length(conds.regex)){
    glm.list[[conds.regex[[i]]]] <- glmLRT(de.obj, fit.obj, coef=coe.l[[i]])
  }
  return(glm.list)
}

## selects all coefficients being contained in each other hierachically
combi.conds <- gsub(":", ".*", names(as.data.frame(glmfit$design))[2:8])
glm.l <- glm.wrapper(ed, glmfit, combi.conds)

## topTags works (same as using p.adjust directly)
topTags.l <- lapply(glm.l, function (x){
  tt <- topTags(x, n=40000) ## set as high as the length 
  tt[tt$table$adj.P.Val<0.05] ## get only below adj.P
})

contigs.l <- lapply(topTags.l, function (x) rownames(x$table))
contigs.all <- unlist(contigs.l)

## The same for MN-genes only
ed.MN <- DGEList(co.f.MN, lib.size=colSums(co.f.MN))
ed.MN <- calcNormFactors(ed.MN)
ed.MN <- estimateGLMCommonDisp(ed.MN, design=design)
ed.MN <- estimateGLMTrendedDisp(ed.MN, design=design)
ed.MN <- estimateGLMTagwiseDisp(ed.MN, design=design)

## glmfit for DGEList uding tagwise dispersion
glmfit.MN <- glmFit(ed.MN, design, dispersion=ed.MN$tagwise.dispersion)

## selects all coefficients being contained in each other hierachically
combi.conds <- gsub(":", ".*", names(as.data.frame(glmfit.MN$design))[2:8])
glm.MN.l <- glm.wrapper(ed.MN, glmfit.MN, combi.conds)

## topTags works (same as using p.adjust directly)
topTags.MN.l <- lapply(glm.MN.l, function (x){
  tt <- topTags(x, n=40000) ## set as high as the length 
  tt[tt$table$adj.P.Val<0.05] ## get only below adj.P
})

contigs.MN.l <- lapply(topTags.MN.l, function (x) rownames(x$table))
contigs.MN.all <- unlist(contigs.MN.l)

## plot fitted vs. observed values for all contigs and libraries 
cf <- cbind(rownames(co.f), co.f)
observed <- melt.data.frame(cf, id.vars="rownames(co.f)")
names(observed) <- c("contig", "lib", "observed")
long.fitted <- melt(glmfit$fitted.values)
names(long.fitted) <- c("contig", "lib", "fitted")
fit.comb <- merge(observed, long.fitted)

fit.plot <- ggplot(fit.comb, aes(observed, fitted)) +
  geom_point() +
  facet_wrap(~lib) +
  scale_x_log10() +
  scale_y_log10()

##################### Male / Female seperately ###########################
##### Male
m.c <- co.f[ , sex.conds=="male" ]
design.sexless <- model.matrix(~eel.conds[sex.conds=="male"]*pop.conds[sex.conds=="male"])
## Counts frame to full DGEList
dm <- DGEList(m.c,
              lib.size=colSums(m.c))
dm <- calcNormFactors(dm)
dm <- estimateGLMCommonDisp(dm, design=design.sexless)
dm <- estimateGLMTrendedDisp(dm, design=design.sexless)
dm <- estimateGLMTagwiseDisp(dm, design=design.sexless)

## glmfit for DGEList uding tagwise dispersion
glmfit.male <- glmFit(dm, design.sexless, dispersion=dm$tagwise.dispersion)

## selects all coefficients being contained in each other hierachically
glm.male <- glmLRT(dm, glmfit.male, coef=grep("pop", colnames(glmfit.male$design)))

## topTags works (same as using p.adjust directly)
tt.male <- topTags(glm.male, n=40000)
topTags.male <- tt.male[tt.male$table$adj.P.Val<0.05]

#### Female
f.c <- co.f[ , sex.conds=="female" ]
## Counts frame to full DGEList
df <- DGEList(f.c,
              lib.size=colSums(f.c))
df <- calcNormFactors(df)
df <- estimateGLMCommonDisp(df, design=design.sexless)
df <- estimateGLMTrendedDisp(df, design=design.sexless)
df <- estimateGLMTagwiseDisp(df, design=design.sexless)

## glmfit for DGEList uding tagwise dispersion
glmfit.female <- glmFit(df, design.sexless, dispersion=df$tagwise.dispersion)

## selects all coefficients being contained in each other hierachically
glm.female <- glmLRT(df, glmfit.female, coef=grep("pop", colnames(glmfit.female$design)))

## topTags works (same as using p.adjust directly)
tt.female <- topTags(glm.female, n=40000)
topTags.female <- tt.female[tt.female$table$adj.P.Val<0.05]

all.methods.pop.contigs <- intersect(intersect(rownames(topTags.female$table),
                                               rownames(topTags.male$table)),
                                     contigs.l[[3]])


## highlighting very interesting Cytochrome C - contigs
cox.contigs <- contig.df[grepl("Cytochrome C oxi", contig.df$Bm.annot, ignore.case=TRUE)  , "contig"]

## lapply(contigs.l, function(x) length(x[x%in%cox.contigs]))
## Toptags.l[[3]]$table[rownames(topTags.l[[3]]$table) %in% cox.contigs, ]

signif.cox.means <- rowSums(do.call("rbind", by(t(co.f[ rownames(co.f) %in% cox.contigs &
                                                 rownames(co.f) %in% contigs.l[[3]], ]),
                                          eel.conds:pop.conds, mean)))

signif.cox.sums <- rbind(by(t(co.f[ rownames(co.f) %in% cox.contigs &
                                   rownames(co.f) %in% contigs.l[[3]], ]),
                            eel.conds:pop.conds, sum))


total.cox.means <- rowSums(do.call("rbind", by(t(co.f[ rownames(co.f) %in% cox.contigs, ]),
                                             eel.conds:pop.conds, mean)))

total.cox.sums <- rbind(by(t(co.f[ rownames(co.f) %in% cox.contigs,  ]),
                           eel.conds:pop.conds, sum))

overall.cox.means <- rowSums(do.call("rbind", by(t(co.f[ rownames(co.f) %in% cox.contigs, ]),
                                             eel.conds:pop.conds, mean)))

cox.table <- rbind(signif.cox.means, signif.cox.sums,
                   total.cox.means, total.cox.sums)

cox.t <- xtable(cox.table)


## highlighting very interesting Cystatin
cy.contigs <- contig.df[grepl("Cystatin", contig.df$Bm.annot, ignore.case=TRUE)  , "contig"]
lapply(contigs.l, function(x) length(x[x%in%cy.contigs]))

## Cytochrome C oxidase:
## Toptags.l[[3]]$table[rownames(topTags.l[[3]]$table) %in% cy.contigs, ]

signif.cy.means <- do.call("cbind",
                           as.list( by(t(co.f[ rownames(co.f) %in% cy.contigs & rownames(co.f)
                                              %in% contigs.l[[3]], ]), eel.conds:pop.conds, mean)))

signif.cy.sums <- rbind(by(t(co.f[ rownames(co.f) %in% cy.contigs &
                                   rownames(co.f) %in% contigs.l[[3]], ]),
                            eel.conds:pop.conds, sum))


total.cy.means <- rowSums(do.call("rbind", by(t(co.f[ rownames(co.f) %in% cy.contigs, ]),
                                             eel.conds:pop.conds, mean)))

total.cy.sums <- rbind(by(t(co.f[ rownames(co.f) %in% cy.contigs,  ]),
                           eel.conds:pop.conds, sum))

cy.table <- rbind(signif.cy.means, signif.cy.sums,
                   total.cy.means, total.cy.sums)
cy.t <- xtable(cy.table)


## Cuticullar collagen:
col.contigs <- contig.df[grepl("Cuticular collagen", contig.df$Bm.annot, ignore.case=TRUE)  , "contig"]
lapply(contigs.l, function(x) length(x[x%in%col.contigs]))

## Toptags.l[[3]]$table[rownames(topTags.l[[3]]$table) %in% col.contigs, ]

signif.col.means <- colSums(do.call("cbind",
                                    as.list( by(t(co.f[ rownames(co.f) %in% col.contigs &
                                                       rownames(co.f)%in% contigs.l[[3]], ]),
                                                eel.conds:pop.conds, mean))))

signif.col.sums <- rbind(by(t(co.f[ rownames(co.f) %in% col.contigs &
                                   rownames(co.f) %in% contigs.l[[3]], ]),
                            eel.conds:pop.conds, sum))

total.col.means <- rowSums(do.call("rbind", by(t(co.f[ rownames(co.f) %in% col.contigs, ]),
                                             eel.conds:pop.conds, mean)))

total.col.sums <- rbind(by(t(co.f[ rownames(co.f) %in% col.contigs,  ]),
                           eel.conds:pop.conds, sum))

col.table <- rbind(signif.col.means, signif.col.sums,
                   total.col.means, total.col.sums)
col.t <- xtable(col.table)

@ 

<<edgeR.venns, echo=FALSE, results=hide>>=

ggsave("/home/ele/thesis/experimental_infection/figures/fit_obs.png",
       fit.plot,
       width=21, height=21)
  
venn.diagram(list(sex         = match(contigs.l[[1]], contigs.all),
                  sex_eel     = match(contigs.l[[4]], contigs.all),
                  sex_pop     = match(contigs.l[[5]], contigs.all),
                  sex_eel_pop = match(contigs.l[[7]], contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/sex_venn.tiff")

venn.diagram(list(eel         = match(contigs.l[[2]], contigs.all),
                  sex_eel     = match(contigs.l[[4]], contigs.all),
                  eel_pop     = match(contigs.l[[6]], contigs.all),
                  sex_eel_pop = match(contigs.l[[7]], contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/eel_venn.tiff")

venn.diagram(list(pop         = match(contigs.l[[3]], contigs.all),
                  sex_pop     = match(contigs.l[[5]], contigs.all),
                  eel_pop     = match(contigs.l[[6]], contigs.all),
                  sex_eel_pop = match(contigs.l[[7]], contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/pop_venn.tiff")


venn.diagram(list(eel         = match(contigs.l[[2]], contigs.l[[3]])[
                    !is.na(match(contigs.l[[2]], contigs.l[[3]]))],
                  sex_pop     = match(contigs.l[[5]], contigs.l[[3]])[
                    !is.na(match(contigs.l[[5]], contigs.l[[3]]))],
                  eel_pop     = match(contigs.l[[6]], contigs.l[[3]])[
                    !is.na(match(contigs.l[[6]], contigs.l[[3]]))],
                  sex_eel_pop = match(contigs.l[[7]], contigs.l[[3]])[
                    !is.na(match(contigs.l[[7]], contigs.l[[3]]))]),
             filename = "/home/ele/thesis/experimental_infection/figures/what_in_pop_venn.tiff")

venn.diagram(list(pop_all     = match(contigs.l[[3]], contigs.all),
                  eel_all     = match(contigs.l[[2]], contigs.all),
                  sex_all     = match(contigs.l[[1]], contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/combi_venn.tiff")

## par(mfrow = c(1, 2))
## maPlot(ed$counts[, 1], ed$counts[, 2], normalize = TRUE, pch = 19,
##            cex = 0.4, ylim = c(-8, 8))
## grid(col = "blue")
## abline(h = log2(ed$samples$norm.factors[2]/ed$samples$norm.factors[1]),
##            col = "red", lwd = 4)

## eff.libsize <- ed$samples$lib.size * ed$samples$norm.factors

## maPlot(ed$counts[, 1]/eff.libsize[1], ed$counts[, 2]/eff.libsize[2],
##     normalize = FALSE, pch = 19, cex = 0.4, ylim = c(-8, 8))
## grid(col = "blue")


@ 

<<edgeR.mds, echo=FALSE>>=

png("/home/ele/thesis/experimental_infection/figures/mds_male.png")
plotMDS(dm)
dev.off()

png("/home/ele/thesis/experimental_infection/figures/mds.png")
plotMDS(ed)
dev.off()

@ 
  
<<edgeR.heat, echo=FALSE>>=
colors <- colorRampPalette(c("white", "darkblue"))(100)

gpd <- contigs.l[[3]]
gpd <- gpd[!gpd%in%contigs.l[[1]] & !gpd%in%contigs.l[[2]]]
gpd <- gpd[gpd%in%MN.contigs]
pop.to.plot <- vsd[gpd, ]

rsc <- ifelse(rownames(pop.to.plot) %in% cox.contigs, "red", "yellow")
csc <- ifelse(pop.conds=="EU", "green", "blue")

png("/home/ele/thesis/experimental_infection/figures/pop_only_contigs_heat.png")
heatmap(pop.to.plot, col = colors, scale = "none", ColSideColors=csc, RowSideColors=rsc)
dev.off()

pop.to.plot <- vsd[all.methods.pop.contigs, ]
png("/home/ele/thesis/experimental_infection/figures/all_method_pop_heat.png")
heatmap(pop.to.plot, col = colors, scale = "none")
dev.off()

pop.to.plot.male <- vsd[rownames(topTags.male$table), sex.conds=="male" ]
png("/home/ele/thesis/experimental_infection/figures/male_pop_contigs_heat.png")
heatmap(pop.to.plot.male, col = colors, scale = "none")
dev.off()

@ 


