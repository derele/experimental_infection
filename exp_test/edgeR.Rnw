<<edgeR, echo=FALSE, cache=TRUE, results=hide>>=

design <- model.matrix(~sex.conds*eel.conds*pop.conds)

ed <- DGEList(counts.frame, lib.size=colSums(counts.frame))
ed <- calcNormFactors(ed)

## This would be only for single factor data
## ed <- estimateCommonDisp(ed)
## ed <- estimateTagwiseDisp(ed)

ed <- estimateGLMCommonDisp(ed, design=design)
ed <- estimateGLMTrendedDisp(ed, design=design)
ed <- estimateGLMTagwiseDisp(ed, design=design)

glmfit <- glmFit(ed, design, dispersion=ed$tagwise.dispersion)

## differences between sexes
results.sex <- glmLRT(ed, glmfit, coef=2)
summary(decideTestsDGE(results.sex, p.value = 0.05))

results.eel <- glmLRT(ed, glmfit, coef=3)
summary(decideTestsDGE(results.eel, p.value = 0.05))

results.pop <- glmLRT(ed, glmfit, coef=4)
summary(decideTestsDGE(results.pop, p.value = 0.05))

results.sex.eel <- glmLRT(ed, glmfit, coef=5)
summary(decideTestsDGE(results.sex.eel, p.value = 0.05))

results.sex.pop <- glmLRT(ed, glmfit, coef=6)
summary(decideTestsDGE(results.sex.pop, p.value = 0.05))

results.eel.pop <- glmLRT(ed, glmfit, coef=7)
summary(decideTestsDGE(results.eel.pop, p.value = 0.05))

results.sex.eel.pop <- glmLRT(ed, glmfit, coef=8)
summary(decideTestsDGE(results.sex.eel.pop, p.value = 0.05))

## contigs.all <- c(contigs.sex, contigs.eel, contigs.pop,
##                  contigs.sex.eel, contigs.sex.pop, contigs.eel.pop, 
##                  contigs.sex.eel.pop)

## now see if edgeR controls properly type-I error by testing replicated for de 
shit.design <- model.matrix(~rep.conds)
shit.ed <- DGEList(counts.frame, lib.size=colSums(counts.frame))
shit.ed <- calcNormFactors(shit.ed)

shit.ed <- estimateGLMCommonDisp(shit.ed, design=shit.design)
shit.ed <- estimateGLMTrendedDisp(shit.ed, design=shit.design)
shit.ed <- estimateGLMTagwiseDisp(shit.ed, design=shit.design)
shit.glmfit <- glmFit(shit.ed, shit.design, dispersion=shit.ed$tagwise.dispersion)

results.shit <- glmLRT(shit.ed, shit.glmfit)
results.shit2 <- glmLRT(shit.ed, shit.glmfit, coef=2)
results.shit3 <- glmLRT(shit.ed, shit.glmfit, coef=3)

summary(decideTestsDGE(results.shit2, p.value = 0.05))
summary(decideTestsDGE(results.shit3, p.value = 0.05))
@ 

<<edgeR.plots, echo=FALSE, results=hide>>=

venn.diagram(list(sex         = match(contigs.sex, contigs.all),
                  sex_eel     = match(contigs.sex.eel, contigs.all),
                  sex_pop     = match(contigs.sex.pop, contigs.all),
                  sex_eel_pop = match(contigs.sex.eel.pop, contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/sex_venn.png")

venn.diagram(list(eel         = match(contigs.eel, contigs.all),
                  eel_pop     = match(contigs.eel.pop, contigs.all),
                  eel_sex     = match(contigs.sex.eel, contigs.all),
                  eel_sex_pop = match(contigs.sex.eel.pop, contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/eel_venn.png")

venn.diagram(list(pop         = match(contigs.pop, contigs.all),
                  pop_eel     = match(contigs.eel.pop, contigs.all),
                  pop_sex     = match(contigs.sex.pop, contigs.all),
                  pop_eel_sex = match(contigs.sex.eel.pop, contigs.all)),
             filename = "/home/ele/thesis/experimental_infection/figures/pop_venn.png")

## par(mfrow = c(1, 2))
## maPlot(ed$counts[, 1], ed$counts[, 2], normalize = TRUE, pch = 19,
##            cex = 0.4, ylim = c(-8, 8))
## grid(col = "blue")
## abline(h = log2(ed$samples$norm.factors[2]/ed$samples$norm.factors[1]),
##            col = "red", lwd = 4)

## eff.libsize <- ed$samples$lib.size * ed$samples$norm.factors

## maPlot(ed$counts[, 1]/eff.libsize[1], ed$counts[, 2]/eff.libsize[2],
##     normalize = FALSE, pch = 19, cex = 0.4, ylim = c(-8, 8))
## grid(col = "blue")

@ 

