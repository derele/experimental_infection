<<ORTHO.sum, echo=FALSE, cache=TRUE>>=

## BRUGIA #############################################
#######################################################

BM <- merge(contig.df[,c("contig", "Bm.hit")],
            counts.frame, by.x = "contig", by.y = "row.names")

BM <- BM[!is.na(BM$Bm.hit),]
BM <- do.call("rbind", by(BM, BM$Bm.hit, function (x) colSums(x[,3:length(BM)])))
BM <- subset(BM, rowSums(BM)>32)

BM.DE <- newCountDataSet(BM, design)
BM.DE <- estimateSizeFactors(BM.DE)
BM.DE <- estimateDispersions(BM.DE, method="blind")

BM.vsd <- getVarianceStabilizedData( BM.DE )
BM.dists <- dist( t( BM.vsd ) )
BM.idists <- as.matrix(BM.dists)
BM.ncu <- counts( BM.DE, normalized=TRUE )

bm.heat <- regHeatmap(BM.idists,
                      col=hmcol, legend=2,
                      dendrogram=list(Row=list(status="hide")),
                      labels=list(Row=list(nrow=3), Col=list(nrow=6)))

BM.ed <- DGEList(BM, lib.size=colSums(BM))
BM.ed <- calcNormFactors(BM.ed)
BM.ed <- estimateGLMCommonDisp(BM.ed, design=design)
BM.ed <- estimateGLMTrendedDisp(BM.ed, design=design)
BM.ed <- estimateGLMTagwiseDisp(BM.ed, design=design)

## glmfit for DGEList uding tagwise dispersion
BM.glmfit <- glmFit(BM.ed, design, dispersion=BM.ed$tagwise.dispersion)

BM.glm.l <- glm.wrapper(BM.ed, BM.glmfit, combi.conds)

## the full table for the  expression model
BM.topTags.l <- lapply(BM.glm.l, function (x){
  tt <- topTags(x, n=40000) ## set as high as the length 
  ## tt[tt$table$adj.P.Val<0.05] ## get only below adj.P
  ## but we do that later
})

## merge to get the contig names
BM.l <- lapply(BM.topTags.l, function (x) {
  merge(x$table,
        contig.df[,c("contig", "Bm.hit", "Bm.annot")],
        by.y="Bm.hit", by.x="row.names", all.x=TRUE)
})

## merge with te contig list
ortho.combi.l <- lapply(1:7, function (i) {
  merge(topTags.l[[i]]$table, BM.l[[i]],
        by.x="row.names", by.y="contig",
        suffixes=c(".Con", ".Bm"))})


## C.elgens ###########################################
#######################################################

CE <- merge(contig.df[,c("contig", "Ce.hit")],
            counts.frame, by.x = "contig", by.y = "row.names")

CE <- CE[!is.na(CE$Ce.hit),]
CE <- do.call("rbind", by(CE, CE$Ce.hit, function (x) colSums(x[,3:length(CE)])))
CE <- subset(CE, rowSums(CE)>32)

CE.DE <- newCountDataSet(CE, design)
CE.DE <- estimateSizeFactors(CE.DE)
CE.DE <- estimateDispersions(CE.DE, method="blind")

CE.vsd <- getVarianceStabilizedData( CE.DE )
CE.dists <- dist( t( CE.vsd ) )
CE.idists <- as.matrix(CE.dists)
CE.ncu <- counts( CE.DE, normalized=TRUE )

ce.heat <- regHeatmap(CE.idists,
                      col=hmcol, legend=2,
                      dendrogram=list(Row=list(status="hide")),
                      labels=list(Row=list(nrow=3), Col=list(nrow=6)))

CE.ed <- DGEList(CE, lib.size=colSums(CE))
CE.ed <- calcNormFactors(CE.ed)
CE.ed <- estimateGLMCommonDisp(CE.ed, design=design)
CE.ed <- estimateGLMTrendedDisp(CE.ed, design=design)
CE.ed <- estimateGLMTagwiseDisp(CE.ed, design=design)

## glmfit for DGEList uding tagwise dispersion
CE.glmfit <- glmFit(CE.ed, design, dispersion=CE.ed$tagwise.dispersion)

CE.glm.l <- glm.wrapper(CE.ed, CE.glmfit, combi.conds)

## the full table for the  expression model
CE.topTags.l <- lapply(CE.glm.l, function (x){
  tt <- topTags(x, n=40000) ## set as high as the length 
  ## tt[tt$table$adj.P.Val<0.05] ## get only below adj.P
  ## but we do that later
})

## merge to get the contig names
CE.l <- lapply(CE.topTags.l, function (x) {
  merge(x$table,
        contig.df[,c("contig", "Ce.hit", "Ce.annot")],
        by.y="Ce.hit", by.x="row.names", all.x=TRUE)
})

## merge with te contig list
ortho.COMBI.l <- lapply(1:7, function (i) {
  merge(ortho.combi.l[[i]], CE.l[[i]],
        by.x="Row.names", by.y="contig",
        suffixes=c(".Con", ".Ce"))})

ortho.SUM.l <- lapply(ortho.COMBI.l, function (x){
  subset(x, adj.P.Val.Bm<0.1 & adj.P.Val.Con<0.05 & adj.P.Val<0.1)
})

ortho.SUM.l <- lapply(ortho.SUM.l, function (x){
  names(x)[names(x)%in%"Row.names"] <- "contig"
  names(x)[names(x)%in%"Row.names.Ce"] <- "ortholog.Ce"
  names(x)[names(x)%in%"Row.names.Con"] <- "ortholog.Bm"
  names(x)[!grepl("contig|Bm|Ce|Con" ,names(x))] <-
    paste(names(x)[!grepl("contig|Bm|Ce|Con" ,names(x))], ".Ce", sep="")
  return(x)
})

ortho.l <- lapply(ortho.SUM.l, function(x) x[,"contig"])

@ 

<<ortho.plot, echo=FALSE, results=hide>>=

pdf("../figures/BM.heat_rep.pdf", width=14, height=14)
plot(bm.heat)
dev.off()

pdf("../figures/CE.heat_rep.pdf", width=14, height=14)
plot(ce.heat)
dev.off()

## the Venn diagram for the orthologous confirmed

ortho.all <- unlist(ortho.l)
all.ortho.venn <- venn.diagram(list(pop_all     = match(ortho.l[[3]], ortho.all),
                              eel_all     = match(ortho.l[[2]], ortho.all),
                              sex_all     = match(ortho.l[[1]], ortho.all)),
                         filename = NULL)
Not.all.ortho <- length(rownames(co.f)[!rownames(co.f)%in%unlist(ortho.l[1:3])])


pdf("/home/ele/thesis/experimental_infection/figures/edgeR_venns.pdf", width=10, height=20)

vp1 <- viewport(x=0.01, y=0.5, w=0.98, h=0.49,
                just=c("left", "bottom"))
vp2 <- viewport(x=0.01, y=0.01, w=0.98, h=0.49,
                just=c("left", "bottom"))
## vp3 <- viewport(x=0.51, y=0.5, w=0.48, h=0.51,
##                 just=c("left", "bottom"))
## vp4 <- viewport(x=0.51, y=0, w=0.48, h=0.49,
##                 just=c("left", "bottom"))

pushViewport(vp1)
grid.roundrect()
grid.text("a",x=unit(0,"npc"),y=unit(0.97,"npc"), gp=gpar(fontsize=18))
grid.text(Not.all, x=unit(0.07,"npc"), y=unit(0.1,"npc"), gp=gpar(fontfamily="serif"))
grid.draw(all.venn)
popViewport()

pushViewport(vp2)
grid.roundrect()
grid.text("b",x=unit(0,"npc"),y=unit(0.97,"npc"), gp=gpar(fontsize=18))
grid.text(Not.all.ortho, x=unit(0.07,"npc"), y=unit(0.1,"npc"), gp=gpar(fontfamily="serif"))
grid.draw(all.ortho.venn)
popViewport()

## pushViewport(vp3)
## grid.roundrect()
## grid.text("c",x=unit(0,"npc"),y=unit(0.97,"npc"), gp=gpar(fontsize=18))
## grid.text(Not.eel, x=unit(0.07,"npc"), y=unit(0.1,"npc"), gp=gpar(fontfamily="serif"))
## grid.draw(eel.venn)
## popViewport()

## pushViewport(vp4)
## grid.roundrect()
## grid.text("d",x=unit(0,"npc"),y=unit(0.97,"npc"), gp=gpar(fontsize=18))
## grid.text(Not.pop, x=unit(0.07,"npc"), y=unit(0.1,"npc"), gp=gpar(fontfamily="serif"))
## grid.draw(pop.venn)
## popViewport()

dev.off()

@ 
